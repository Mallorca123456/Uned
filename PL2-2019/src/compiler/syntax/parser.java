
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 04 14:43:38 BRT 2019
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 04 14:43:38 BRT 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\004\000\002\056\002\000\002\002" +
    "\004\000\002\003\004\000\002\003\004\000\002\004\005" +
    "\000\002\005\013\000\002\006\004\000\002\006\002\000" +
    "\002\012\004\000\002\012\003\000\002\013\006\000\002" +
    "\014\003\000\002\014\003\000\002\007\004\000\002\007" +
    "\002\000\002\015\004\000\002\015\003\000\002\016\015" +
    "\000\002\010\004\000\002\010\002\000\002\017\004\000" +
    "\002\017\003\000\002\020\006\000\002\021\005\000\002" +
    "\021\003\000\002\022\003\000\002\022\003\000\002\011" +
    "\005\000\002\011\002\000\002\023\007\000\002\025\005" +
    "\000\002\025\002\000\002\026\005\000\002\026\003\000" +
    "\002\026\002\000\002\027\005\000\002\027\005\000\002" +
    "\024\004\000\002\024\002\000\002\033\003\000\002\033" +
    "\003\000\002\033\005\000\002\033\003\000\002\034\005" +
    "\000\002\034\005\000\002\034\003\000\002\035\005\000" +
    "\002\035\005\000\002\035\005\000\002\035\004\000\002" +
    "\035\003\000\002\030\004\000\002\030\003\000\002\030" +
    "\002\000\002\031\005\000\002\031\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\043\004\000\002\042\005\000\002\044" +
    "\010\000\002\045\004\000\002\045\002\000\002\046\013" +
    "\000\002\037\003\000\002\037\004\000\002\040\005\000" +
    "\002\040\004\000\002\041\005\000\002\041\003\000\002" +
    "\047\006\000\002\050\006\000\002\051\003\000\002\036" +
    "\003\000\002\036\004\000\002\036\004\000\002\052\005" +
    "\000\002\053\003\000\002\053\003\000\002\054\003\000" +
    "\002\054\003\000\002\055\003\000\002\055\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\243\000\004\012\000\001\002\000\004\002\245\001" +
    "\002\000\004\012\007\001\002\000\004\002\uffff\001\002" +
    "\000\004\004\243\001\002\000\016\003\013\013\ufff9\015" +
    "\ufff9\021\011\022\ufff9\023\ufff9\001\002\000\004\004\233" +
    "\001\002\000\004\002\ufffe\001\002\000\004\002\ufffd\001" +
    "\002\000\012\013\ufff2\015\ufff2\022\016\023\ufff2\001\002" +
    "\000\010\013\uffed\015\uffed\023\041\001\002\000\004\004" +
    "\017\001\002\000\004\045\023\001\002\000\012\004\ufff0" +
    "\013\ufff0\015\ufff0\023\ufff0\001\002\000\012\004\017\013" +
    "\ufff3\015\ufff3\023\ufff3\001\002\000\012\004\ufff1\013\ufff1" +
    "\015\ufff1\023\ufff1\001\002\000\004\010\024\001\002\000" +
    "\004\037\025\001\002\000\006\004\026\052\030\001\002" +
    "\000\006\040\uffaa\041\uffaa\001\002\000\004\041\031\001" +
    "\002\000\006\040\uffab\041\uffab\001\002\000\006\004\026" +
    "\052\030\001\002\000\004\040\033\001\002\000\004\011" +
    "\034\001\002\000\006\005\035\006\037\001\002\000\006" +
    "\036\uffad\043\uffad\001\002\000\004\043\040\001\002\000" +
    "\006\036\uffac\043\uffac\001\002\000\012\004\uffef\013\uffef" +
    "\015\uffef\023\uffef\001\002\000\004\004\207\001\002\000" +
    "\006\013\uffe4\015\043\001\002\000\004\004\175\001\002" +
    "\000\014\013\ufff9\015\ufff9\021\011\022\ufff9\023\ufff9\001" +
    "\002\000\004\013\046\001\002\000\022\004\067\014\uffcb" +
    "\016\054\024\060\030\071\032\047\033\065\034\052\001" +
    "\002\000\004\035\170\001\002\000\010\014\uffc4\025\uffc4" +
    "\043\uffc4\001\002\000\004\014\165\001\002\000\010\014" +
    "\uffb2\025\uffb2\043\uffb2\001\002\000\010\014\uffc1\025\uffc1" +
    "\043\uffc1\001\002\000\016\004\105\020\103\035\077\052" +
    "\074\053\075\054\076\001\002\000\010\014\uffc2\025\uffc2" +
    "\043\uffc2\001\002\000\004\051\162\001\002\000\010\014" +
    "\uffcc\025\uffcc\043\160\001\002\000\016\004\105\020\103" +
    "\035\077\052\074\053\075\054\076\001\002\000\010\014" +
    "\uffc8\025\uffc8\043\uffc8\001\002\000\010\014\uffc9\025\uffc9" +
    "\043\uffc9\001\002\000\010\014\uffc7\025\uffc7\043\uffc7\001" +
    "\002\000\010\014\uffc6\025\uffc6\043\uffc6\001\002\000\004" +
    "\035\146\001\002\000\010\014\uffc3\025\uffc3\043\uffc3\001" +
    "\002\000\016\014\uffba\025\uffba\035\110\037\107\043\uffba" +
    "\051\uffb1\001\002\000\010\014\uffc5\025\uffc5\043\uffc5\001" +
    "\002\000\004\004\072\001\002\000\004\051\073\001\002" +
    "\000\016\004\105\020\103\035\077\052\074\053\075\054" +
    "\076\001\002\000\036\014\uffd3\017\uffd3\025\uffd3\026\uffd3" +
    "\027\uffd3\031\uffd3\036\uffd3\040\uffd3\042\uffd3\043\uffd3\045" +
    "\uffd3\046\uffd3\047\uffd3\050\uffd3\001\002\000\036\014\uffa9" +
    "\017\uffa9\025\uffa9\026\uffa9\027\uffa9\031\uffa9\036\uffa9\040" +
    "\uffa9\042\uffa9\043\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9" +
    "\001\002\000\036\014\uffa8\017\uffa8\025\uffa8\026\uffa8\027" +
    "\uffa8\031\uffa8\036\uffa8\040\uffa8\042\uffa8\043\uffa8\045\uffa8" +
    "\046\uffa8\047\uffa8\050\uffa8\001\002\000\016\004\105\020" +
    "\103\035\077\052\074\053\075\054\076\001\002\000\016" +
    "\017\125\031\136\045\121\046\122\047\124\050\123\001" +
    "\002\000\036\014\uffce\017\uffce\025\uffce\026\uffce\027\uffce" +
    "\031\uffce\036\uffce\040\uffce\042\uffce\043\uffce\045\uffce\046" +
    "\uffce\047\uffce\050\uffce\001\002\000\036\014\uffd9\017\uffd9" +
    "\025\uffd9\026\uffd9\027\uffd9\031\uffd9\036\uffd9\040\uffd9\042" +
    "\uffd9\043\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\001\002" +
    "\000\016\004\105\020\103\035\077\052\074\053\075\054" +
    "\076\001\002\000\036\014\uffd6\017\uffd6\025\uffd6\026\uffd6" +
    "\027\uffd6\031\uffd6\036\uffd6\040\uffd6\042\uffd6\043\uffd6\045" +
    "\uffd6\046\uffd6\047\uffd6\050\uffd6\001\002\000\042\014\uffb1" +
    "\017\uffb1\025\uffb1\026\uffb1\027\uffb1\031\uffb1\035\110\036" +
    "\uffb1\037\107\040\uffb1\042\uffb1\043\uffb1\045\uffb1\046\uffb1" +
    "\047\uffb1\050\uffb1\001\002\000\036\014\uffd8\017\uffd8\025" +
    "\uffd8\026\uffd8\027\uffd8\031\uffd8\036\uffd8\040\uffd8\042\uffd8" +
    "\043\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\001\002\000" +
    "\016\004\105\020\103\035\077\052\074\053\075\054\076" +
    "\001\002\000\020\004\105\020\103\035\077\036\114\052" +
    "\074\053\075\054\076\001\002\000\040\014\uffb0\017\uffb0" +
    "\025\uffb0\026\uffb0\027\uffb0\031\uffb0\036\uffb0\040\uffb0\042" +
    "\uffb0\043\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0" +
    "\001\002\000\036\014\uffaf\017\uffaf\025\uffaf\026\uffaf\027" +
    "\uffaf\031\uffaf\036\uffaf\040\uffaf\042\uffaf\043\uffaf\045\uffaf" +
    "\046\uffaf\047\uffaf\050\uffaf\001\002\000\020\017\125\036" +
    "\uffb5\042\uffb5\045\121\046\122\047\124\050\123\001\002" +
    "\000\040\014\uffb7\017\uffb7\025\uffb7\026\uffb7\027\uffb7\031" +
    "\uffb7\036\uffb7\040\uffb7\042\uffb7\043\uffb7\045\uffb7\046\uffb7" +
    "\047\uffb7\050\uffb7\051\uffb7\001\002\000\006\036\117\042" +
    "\116\001\002\000\016\004\105\020\103\035\077\052\074" +
    "\053\075\054\076\001\002\000\040\014\uffb8\017\uffb8\025" +
    "\uffb8\026\uffb8\027\uffb8\031\uffb8\036\uffb8\040\uffb8\042\uffb8" +
    "\043\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\001" +
    "\002\000\020\017\125\036\uffb6\042\uffb6\045\121\046\122" +
    "\047\124\050\123\001\002\000\016\004\105\020\103\035" +
    "\077\052\074\053\075\054\076\001\002\000\016\004\105" +
    "\020\103\035\077\052\074\053\075\054\076\001\002\000" +
    "\016\004\105\020\103\035\077\052\074\053\075\054\076" +
    "\001\002\000\016\004\105\020\103\035\077\052\074\053" +
    "\075\054\076\001\002\000\016\004\105\020\103\035\077" +
    "\052\074\053\075\054\076\001\002\000\036\014\uffd0\017" +
    "\uffd0\025\uffd0\026\uffd0\027\uffd0\031\uffd0\036\uffd0\040\uffd0" +
    "\042\uffd0\043\uffd0\045\uffd0\046\uffd0\047\124\050\uffd0\001" +
    "\002\000\036\014\uffd4\017\uffd4\025\uffd4\026\uffd4\027\uffd4" +
    "\031\uffd4\036\uffd4\040\uffd4\042\uffd4\043\uffd4\045\uffd4\046" +
    "\uffd4\047\uffd4\050\uffd4\001\002\000\032\014\uffd2\017\125" +
    "\025\uffd2\026\uffd2\027\uffd2\031\uffd2\036\uffd2\040\uffd2\042" +
    "\uffd2\043\uffd2\046\122\047\124\001\002\000\036\014\uffd5" +
    "\017\uffd5\025\uffd5\026\uffd5\027\uffd5\031\uffd5\036\uffd5\040" +
    "\uffd5\042\uffd5\043\uffd5\045\uffd5\046\uffd5\047\124\050\uffd5" +
    "\001\002\000\032\014\uffd1\017\125\025\uffd1\026\uffd1\027" +
    "\uffd1\031\uffd1\036\uffd1\040\uffd1\042\uffd1\043\uffd1\046\122" +
    "\047\124\001\002\000\016\017\125\040\134\045\121\046" +
    "\122\047\124\050\123\001\002\000\040\014\uffae\017\uffae" +
    "\025\uffae\026\uffae\027\uffae\031\uffae\036\uffae\040\uffae\042" +
    "\uffae\043\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae" +
    "\001\002\000\036\014\uffcf\017\uffcf\025\uffcf\026\uffcf\027" +
    "\uffcf\031\uffcf\036\uffcf\040\uffcf\042\uffcf\043\uffcf\045\uffcf" +
    "\046\uffcf\047\uffcf\050\uffcf\001\002\000\016\004\105\020" +
    "\103\035\077\052\074\053\075\054\076\001\002\000\016" +
    "\017\125\027\140\045\121\046\122\047\124\050\123\001" +
    "\002\000\022\004\067\014\uffcb\016\054\024\060\030\071" +
    "\032\047\033\065\034\052\001\002\000\004\014\142\001" +
    "\002\000\010\014\uffbb\025\uffbb\043\uffbb\001\002\000\016" +
    "\017\125\036\144\045\121\046\122\047\124\050\123\001" +
    "\002\000\036\014\uffd7\017\uffd7\025\uffd7\026\uffd7\027\uffd7" +
    "\031\uffd7\036\uffd7\040\uffd7\042\uffd7\043\uffd7\045\uffd7\046" +
    "\uffd7\047\uffd7\050\uffd7\001\002\000\012\014\uffb9\025\uffb9" +
    "\043\uffb9\051\uffaf\001\002\000\016\004\105\020\103\035" +
    "\077\052\074\053\075\054\076\001\002\000\016\017\125" +
    "\036\150\045\121\046\122\047\124\050\123\001\002\000" +
    "\010\014\uffb3\025\uffb3\043\uffb3\001\002\000\016\017\125" +
    "\026\152\045\121\046\122\047\124\050\123\001\002\000" +
    "\024\004\067\014\uffcb\016\054\024\060\025\uffcb\030\071" +
    "\032\047\033\065\034\052\001\002\000\006\014\uffbc\025" +
    "\155\001\002\000\004\014\157\001\002\000\022\004\067" +
    "\014\uffcb\016\054\024\060\030\071\032\047\033\065\034" +
    "\052\001\002\000\004\014\uffbd\001\002\000\010\014\uffbe" +
    "\025\uffbe\043\uffbe\001\002\000\024\004\067\014\uffcd\016" +
    "\054\024\060\025\uffcd\030\071\032\047\033\065\034\052" +
    "\001\002\000\010\014\uffca\025\uffca\043\uffca\001\002\000" +
    "\016\004\105\020\103\035\077\052\074\053\075\054\076" +
    "\001\002\000\022\014\uffbf\017\125\025\uffbf\043\uffbf\045" +
    "\121\046\122\047\124\050\123\001\002\000\022\014\uffc0" +
    "\017\125\025\uffc0\043\uffc0\045\121\046\122\047\124\050" +
    "\123\001\002\000\004\004\166\001\002\000\004\043\167" +
    "\001\002\000\010\002\ufffb\013\ufffb\015\ufffb\001\002\000" +
    "\004\007\171\001\002\000\004\036\172\001\002\000\010" +
    "\014\uffb4\025\uffb4\043\uffb4\001\002\000\006\013\uffe4\015" +
    "\043\001\002\000\004\013\uffe5\001\002\000\010\035\176" +
    "\043\uffe1\044\uffe1\001\002\000\006\004\207\036\uffde\001" +
    "\002\000\006\043\uffda\044\201\001\002\000\004\043\203" +
    "\001\002\000\006\005\035\006\037\001\002\000\004\043" +
    "\uffdb\001\002\000\014\013\uffe3\015\uffe3\021\uffe3\022\uffe3" +
    "\023\uffe3\001\002\000\006\003\215\044\216\001\002\000" +
    "\006\036\uffdf\043\213\001\002\000\004\036\212\001\002" +
    "\000\010\003\uffe8\042\210\044\uffe8\001\002\000\004\004" +
    "\207\001\002\000\006\003\uffe9\044\uffe9\001\002\000\006" +
    "\043\uffe2\044\uffe2\001\002\000\006\004\207\036\uffde\001" +
    "\002\000\004\036\uffe0\001\002\000\004\043\222\001\002" +
    "\000\010\004\221\005\035\006\037\001\002\000\006\036" +
    "\uffdd\043\uffdd\001\002\000\006\036\uffe7\043\uffe7\001\002" +
    "\000\006\036\uffe6\043\uffe6\001\002\000\006\036\uffdc\043" +
    "\uffdc\001\002\000\004\044\227\001\002\000\010\004\207" +
    "\013\uffee\015\uffee\001\002\000\010\004\uffeb\013\uffeb\015" +
    "\uffeb\001\002\000\010\004\uffec\013\uffec\015\uffec\001\002" +
    "\000\010\004\221\005\035\006\037\001\002\000\004\043" +
    "\231\001\002\000\010\004\uffea\013\uffea\015\uffea\001\002" +
    "\000\014\004\ufff7\013\ufff7\015\ufff7\022\ufff7\023\ufff7\001" +
    "\002\000\004\045\236\001\002\000\014\004\233\013\ufffa" +
    "\015\ufffa\022\ufffa\023\ufffa\001\002\000\014\004\ufff8\013" +
    "\ufff8\015\ufff8\022\ufff8\023\ufff8\001\002\000\010\052\240" +
    "\053\075\054\076\001\002\000\004\043\242\001\002\000" +
    "\004\043\ufff5\001\002\000\004\043\ufff4\001\002\000\014" +
    "\004\ufff6\013\ufff6\015\ufff6\022\ufff6\023\ufff6\001\002\000" +
    "\004\043\244\001\002\000\016\003\ufffc\013\ufffc\015\ufffc" +
    "\021\ufffc\022\ufffc\023\ufffc\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\243\000\006\002\003\056\004\001\001\000\002\001" +
    "\001\000\006\003\005\004\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\011\006\013\001\001\000" +
    "\006\012\233\013\231\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\014\001\001\000\004\010\041\001" +
    "\001\000\006\015\020\016\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\054\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\017\223\020\224\021\222\001\001\000\006\011\044\023" +
    "\043\001\001\000\002\001\001\000\006\005\172\006\013" +
    "\001\001\000\002\001\001\000\032\030\050\031\056\032" +
    "\061\036\055\037\052\042\060\043\067\044\062\046\063" +
    "\047\047\050\065\051\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\033\163\034\101\035\105\036\103\055" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\033\150\034\101\035\105\036\103\055" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\040\144\052\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\033\077\034" +
    "\101\035\105\036\103\055\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\033\142\034" +
    "\101\035\105\036\103\055\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\033\134\034" +
    "\101\035\105\036\103\055\100\001\001\000\002\001\001" +
    "\000\006\040\111\052\110\001\001\000\002\001\001\000" +
    "\014\033\132\034\101\035\105\036\103\055\100\001\001" +
    "\000\016\033\112\034\101\035\105\036\103\041\114\055" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\033" +
    "\117\034\101\035\105\036\103\055\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\033\131\034\101\035" +
    "\105\036\103\055\100\001\001\000\014\033\130\034\101" +
    "\035\105\036\103\055\100\001\001\000\014\033\127\034" +
    "\101\035\105\036\103\055\100\001\001\000\014\033\126" +
    "\034\101\035\105\036\103\055\100\001\001\000\014\033" +
    "\125\034\101\035\105\036\103\055\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\033\136\034\101\035\105\036" +
    "\103\055\100\001\001\000\002\001\001\000\032\030\140" +
    "\031\056\032\061\036\055\037\052\042\060\043\067\044" +
    "\062\046\063\047\047\050\065\051\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\033\146\034\101\035\105" +
    "\036\103\055\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\030\152\031\056\032\061" +
    "\036\055\037\052\042\060\043\067\044\062\046\063\047" +
    "\047\050\065\051\054\001\001\000\004\045\153\001\001" +
    "\000\002\001\001\000\032\030\155\031\056\032\061\036" +
    "\055\037\052\042\060\043\067\044\062\046\063\047\047" +
    "\050\065\051\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\032\160\036\055\037\052\042\060\043\067" +
    "\044\062\046\063\047\047\050\065\051\054\001\001\000" +
    "\002\001\001\000\014\033\162\034\101\035\105\036\103" +
    "\055\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\173\023\043\001\001\000\002\001\001\000\004\025\176" +
    "\001\001\000\010\021\203\026\205\027\204\001\001\000" +
    "\004\024\177\001\001\000\002\001\001\000\004\053\201" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\021\203\026\213\027\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\216\053\217\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\225\021" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\227\053\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\234" +
    "\001\001\000\002\001\001\000\006\014\236\055\240\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();

	public void syntax_error(Symbol symbol)
	{
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError("Error sintactico", token);
	}

	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory();

	public void openScope(String scopeName) {
	    ScopeIF scope = scopeManager.openScope(scopeName);
        semanticErrorManager.semanticInfo("Opened " + scope);
	}

    public ScopeIF getCurrentScope(){
        return scopeManager.getCurrentScope();
    }

	public void closeCurrentScope() {
	    ScopeIF scope = scopeManager.getCurrentScope();
        scopeManager.closeScope();
        semanticErrorManager.semanticInfo("Close " + scope);
	}

	public void checkSymbolDoesNotExists(String identifier){
		ScopeIF scope = scopeManager.getCurrentScope();
		SymbolTableIF symbolTable = scope.getSymbolTable();
	    if(symbolTable.containsSymbol(identifier)){
            semanticErrorManager.semanticFatalError("Identificador ya utilizado");
		}
	}

	public void checkTypeDoesNotExists(String identifier){
	    ScopeIF scope = scopeManager.getCurrentScope();
        TypeTableIF typeTable = scope.getTypeTable();
        if(typeTable.containsType(identifier)){
            semanticErrorManager.semanticFatalError("Tipo ya utilizado");
        }

        while(scope.getParentScope() != null){
           ScopeIF parentScope = scope.getParentScope();
           TypeTableIF parentTypeTable = parentScope.getTypeTable();
           if(typeTable.containsType(identifier)){
             semanticErrorManager.semanticFatalError("Tipo ya utilizado");
           }
        }
	}

    public TypeIF getType(String identifier) {
        	    ScopeIF scope = scopeManager.getCurrentScope();
                TypeTableIF typeTable = scope.getTypeTable();
                System.out.println("Searching type " + identifier);
                TypeIF type = typeTable.getType(identifier);

                 if(type==null) {
                    while(scope.getParentScope() != null){
                          scope = scope.getParentScope();
                          typeTable = scope.getTypeTable();
                          type = typeTable.getType(identifier);
                          System.out.println("Searching type " + identifier);
                          if(type == null){
                            semanticErrorManager.semanticFatalError("Tipo no encontrado");
                          }
                    }
                 }


                return type;
        }

	public void addSymbol(String identifier, SymbolIF symbol){
	    ScopeIF scope = scopeManager.getCurrentScope();
        SymbolTableIF symbolTable = scope.getSymbolTable();
        symbolTable.addSymbol(identifier, symbol);
        semanticErrorManager.semanticInfo("Added symbol " + identifier + " in " + scope);
	}

	public void addType(String identifier, TypeIF type){
	    ScopeIF scope = scopeManager.getCurrentScope();
        TypeTableIF typeTable = scope.getTypeTable();
        typeTable.addType(identifier, type);
        semanticErrorManager.semanticInfo("Added type " + identifier + " in " + scope);
	}


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // vBooleano ::= FALSE 
            {
              VBooleano RESULT =null;
		
                   RESULT = new VBooleano(false);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vBooleano",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // vBooleano ::= TRUE 
            {
              VBooleano RESULT =null;
		
                   RESULT = new VBooleano(true);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vBooleano",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // entOid ::= IDENTIFICADOR 
            {
              EntOId RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new EntOId(identificador.getLexema());
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entOid",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // entOid ::= ENTERO 
            {
              EntOId RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token entero = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new EntOId(Integer.parseInt(entero.getLexema()));
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entOid",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // intOBool ::= BOOLEAN 
            {
              IntOBool RESULT =null;
		
                    RESULT =  new IntOBool("BOOL");
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intOBool",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // intOBool ::= INTEGER 
            {
              IntOBool RESULT =null;
		
                    RESULT =  new IntOBool("INTEGER");
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intOBool",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // idArray ::= CORCHIZQ expresion CORCHDER 
            {
              IdArray RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new IdArray(expresion);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idArray",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // variables ::= IDENTIFICADOR parFuncion 
            {
              Variables RESULT =null;
		int parFuncionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parFuncionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParFuncion parFuncion = (ParFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new Variables(parFuncion);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // variables ::= IDENTIFICADOR idArray 
            {
              Variables RESULT =null;
		int idArrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idArrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdArray idArray = (IdArray)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new Variables(idArray);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // variables ::= IDENTIFICADOR 
            {
              Variables RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new Variables(identificador.getLexema());
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sWriteLn ::= WRITELN 
            {
              SWriteLn RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sWriteLn",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sWriteInt ::= WRITEINT PARENIZQ expresion PARENDER 
            {
              SWriteInt RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sWriteInt",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sWriteString ::= WRITESTRING PARENIZQ STRING PARENDER 
            {
              SWriteString RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sWriteString",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parametros ::= expresion 
            {
              Parametros RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parametros ::= parametros COMA expresion 
            {
              Parametros RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parFuncion ::= PARENIZQ PARENDER 
            {
              ParFuncion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parFuncion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parFuncion ::= PARENIZQ parametros PARENDER 
            {
              ParFuncion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parFuncion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentProcedure ::= IDENTIFICADOR parFuncion 
            {
              SentProcedure RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentProcedure",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentProcedure ::= IDENTIFICADOR 
            {
              SentProcedure RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentProcedure",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentFor ::= FOR IDENTIFICADOR DOSPUNTOSIGUAL expresion TO expresion DO sentencias END 
            {
              SentFor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentFor",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentElse ::= 
            {
              SentElse RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentElse",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentElse ::= ELSE sentencias 
            {
              SentElse RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentElse",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentIf ::= IF expresion THEN sentencias sentElse END 
            {
              SentIf RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentIf",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentAsign ::= variables DOSPUNTOSIGUAL expresion 
            {
              SentAsign RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentAsign",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentReturn ::= RETURN expresion 
            {
              SentReturn RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentReturn",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentencia ::= sentProcedure 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentencia ::= sWriteLn 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentencia ::= sWriteInt 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentencia ::= sWriteString 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sentencia ::= sentReturn 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentencia ::= sentFor 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentencia ::= sentIf 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentencia ::= sentAsign 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // listSentencia ::= sentencia 
            {
              ListSentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listSentencia",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // listSentencia ::= listSentencia PUNTOYCOMA sentencia 
            {
              ListSentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listSentencia",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentencias ::= 
            {
              Sentencias RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentencias ::= listSentencia 
            {
              Sentencias RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentencias ::= listSentencia PUNTOYCOMA 
            {
              Sentencias RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exprLogica ::= vBooleano 
            {
              ExprLogica RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLogica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exprLogica ::= NOT expresion 
            {
              ExprLogica RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLogica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exprLogica ::= expresion OR expresion 
            {
              ExprLogica RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLogica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exprLogica ::= expresion IGUAL expresion 
            {
              ExprLogica RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLogica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exprLogica ::= expresion MAYOR expresion 
            {
              ExprLogica RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLogica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exprArit ::= ENTERO 
            {
              ExpArit RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprArit",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exprArit ::= expresion PRODUCTO expresion 
            {
              ExpArit RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprArit",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exprArit ::= expresion MINUS expresion 
            {
              ExpArit RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprArit",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= variables 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= PARENIZQ expresion PARENDER 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= exprLogica 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= exprArit 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipoRetorno ::= 
            {
              TipoRetorno RESULT =null;
		
                   RESULT = new TipoRetorno();
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRetorno",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tipoRetorno ::= DOSPUNTOS intOBool 
            {
              TipoRetorno RESULT =null;
		int intOBoolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int intOBoolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IntOBool intOBool = (IntOBool)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new TipoRetorno(intOBool);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRetorno",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // procParam ::= cadIdVar error PUNTOYCOMA 
            {
              ProcParam RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procParam",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // procParam ::= cadIdVar DOSPUNTOS tipoVar 
            {
              ProcParam RESULT =null;
		int cadIdVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cadIdVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CadIdVar cadIdVar = (CadIdVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipoVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TipoVar tipoVar = (TipoVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  RESULT = new ProcParam(cadIdVar, tipoVar);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procParam",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // procListParam ::= 
            {
              ProcListParam RESULT =null;
		
                    RESULT = new ProcListParam();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procListParam",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // procListParam ::= procParam 
            {
              ProcListParam RESULT =null;
		int procParamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int procParamright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcParam procParam = (ProcParam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 RESULT = new ProcListParam(procParam);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procListParam",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // procListParam ::= procParam PUNTOYCOMA procListParam 
            {
              ProcListParam RESULT =null;
		int procParamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int procParamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ProcParam procParam = (ProcParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int procListParamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int procListParamright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcListParam procListParam = (ProcListParam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 procListParam.addProcParam(procParam);
                 RESULT = procListParam;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procListParam",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // procParenParam ::= 
            {
              ProcParenParam RESULT =null;
		
                 RESULT = new ProcParenParam();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procParenParam",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // procParenParam ::= PARENIZQ procListParam PARENDER 
            {
              ProcParenParam RESULT =null;
		int procListParamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int procListParamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProcListParam procListParam = (ProcListParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                 RESULT = new ProcParenParam(procListParam);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procParenParam",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cabProcedure ::= PROCEDURE IDENTIFICADOR procParenParam tipoRetorno PUNTOYCOMA 
            {
              CabProcedure RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int procParenParamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int procParenParamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ProcParenParam procParenParam = (ProcParenParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoRetornoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipoRetornoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TipoRetorno tipoRetorno = (TipoRetorno)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                   openScope("PROCEDURE_"+identificador.getLexema());
                   RESULT = new CabProcedure(identificador.getLexema(), procParenParam, tipoRetorno);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabProcedure",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmSubprogram ::= 
            {
              StmSubprogram RESULT =null;
		
                   RESULT = new StmSubprogram();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmSubprogram",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmSubprogram ::= cabProcedure cuerpo stmSubprogram 
            {
              StmSubprogram RESULT =null;
		int cabProcedureleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cabProcedureright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CabProcedure cabProcedure = (CabProcedure)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuerpo cuerpo = (Cuerpo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmSubprogramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmSubprogramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmSubprogram stmSubprogram = (StmSubprogram)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  stmSubprogram.addCuerpoAndProcedure(cuerpo, cabProcedure);
                  System.out.println(stmSubprogram);
                  RESULT = stmSubprogram;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmSubprogram",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipoVar ::= IDENTIFICADOR 
            {
              TipoVar RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new TipoVar(identificador.getLexema());
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipoVar ::= intOBool 
            {
              TipoVar RESULT =null;
		int intOBoolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int intOBoolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IntOBool intOBool = (IntOBool)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new TipoVar(intOBool);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cadIdVar ::= IDENTIFICADOR 
            {
              CadIdVar RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  RESULT =  new CadIdVar(identificador.getLexema());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cadIdVar",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cadIdVar ::= IDENTIFICADOR COMA cadIdVar 
            {
              CadIdVar RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cadIdVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadIdVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CadIdVar cadIdVar = (CadIdVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  cadIdVar.addIdentificador(identificador.getLexema());
                  RESULT = cadIdVar;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cadIdVar",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expVar ::= cadIdVar DOSPUNTOS tipoVar PUNTOYCOMA 
            {
              ExpVar RESULT =null;
		int cadIdVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cadIdVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CadIdVar cadIdVar = (CadIdVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipoVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TipoVar tipoVar = (TipoVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                   RESULT = new ExpVar(cadIdVar, tipoVar);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expVar",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentVar ::= expVar 
            {
              SentVar RESULT =null;
		int expVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpVar expVar = (ExpVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new SentVar(expVar);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentVar",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentVar ::= sentVar expVar 
            {
              SentVar RESULT =null;
		int sentVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SentVar sentVar = (SentVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpVar expVar = (ExpVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     sentVar.addExpVar(expVar);
                     RESULT = sentVar;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentVar",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmVar ::= 
            {
              StmVar RESULT =null;
		
                    RESULT = new StmVar();
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmVar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmVar ::= VAR sentVar 
            {
              StmVar RESULT =null;
		int sentVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentVar sentVar = (SentVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new StmVar(sentVar);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmVar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expTipo ::= IDENTIFICADOR IGUAL ARRAY CORCHIZQ entOid PUNTOPUNTO entOid CORCHDER OF intOBool PUNTOYCOMA 
            {
              ExpTipo RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int endOidIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int endOidIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		EntOId endOidI = (EntOId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int endOiddleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int endOiddright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		EntOId endOidd = (EntOId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int intOBoolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int intOBoolright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IntOBool intOBool = (IntOBool)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = new ExpTipo(identificador.getLexema(), endOidI, endOidd, intOBool);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expTipo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentTipo ::= expTipo 
            {
              SentTipo RESULT =null;
		int expTipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expTiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpTipo expTipo = (ExpTipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new SentTipo(expTipo);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentTipo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentTipo ::= sentTipo expTipo 
            {
              SentTipo RESULT =null;
		int sentTipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentTiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SentTipo sentTipo = (SentTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expTipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expTiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpTipo expTipo = (ExpTipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    sentTipo.addExpTipo(expTipo);
                    RESULT = sentTipo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentTipo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmTipos ::= 
            {
              StmTipos RESULT =null;
		
                    RESULT = new StmTipos();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmTipos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmTipos ::= TYPE sentTipo 
            {
              StmTipos RESULT =null;
		int sentTipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentTiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentTipo sentTipo = (SentTipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  RESULT = new StmTipos(sentTipo);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmTipos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // valorConst ::= vBooleano 
            {
              ValorConst RESULT =null;
		int vBooleanoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vBooleanoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VBooleano vBooleano = (VBooleano)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   ValorConst valorConst = new ValorConst(vBooleano.getValue());
                   RESULT = valorConst;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorConst",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // valorConst ::= ENTERO 
            {
              ValorConst RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   ValorConst valorConst = new ValorConst(Integer.parseInt(valor.getLexema()));
                   RESULT = valorConst;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorConst",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expConst ::= IDENTIFICADOR IGUAL valorConst PUNTOYCOMA 
            {
              ExpConst RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ValorConst valorConst = (ValorConst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                   String expConstIdentificador = identificador.getLexema();
                   ExpConst expConst = new ExpConst(expConstIdentificador, valorConst);
                   RESULT = expConst;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expConst",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentConst ::= expConst 
            {
              SentConst RESULT =null;
		int expConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpConst expConst = (ExpConst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     RESULT = new SentConst(expConst);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentConst",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentConst ::= sentConst expConst 
            {
              SentConst RESULT =null;
		int sentConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SentConst sentConst = (SentConst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpConst expConst = (ExpConst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    sentConst.addExpConst(expConst);
                    RESULT = sentConst;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentConst",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmConstantes ::= 
            {
              StmConstantes RESULT =null;
		
                   RESULT = new StmConstantes();
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmConstantes",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmConstantes ::= CONST sentConst 
            {
              StmConstantes RESULT =null;
		int sentConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentConst sentConst = (SentConst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   RESULT = new StmConstantes(sentConst);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmConstantes",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cuerpo ::= stmConstantes stmTipos stmVar stmSubprogram BEGIN sentencias END IDENTIFICADOR PUNTOYCOMA 
            {
              Cuerpo RESULT =null;
		int stmConstantesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int stmConstantesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		StmConstantes stmConstantes = (StmConstantes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int stmTiposleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int stmTiposright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		StmTipos stmTipos = (StmTipos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int stmVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int stmVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		StmVar stmVar = (StmVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int stmSubprogramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int stmSubprogramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		StmSubprogram stmSubprogram = (StmSubprogram)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Sentencias sentencias = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                  //Constants
                  if(stmConstantes.getSentConst() != null){
                      for(ExpConst constant: stmConstantes.getSentConst().getExpConstList()){
                        checkSymbolDoesNotExists(constant.getIdentificador());
                        ValorConst valorConst = constant.getValorConst();
                        SymbolConstant symbolConstant = null;
                        if(valorConst.isBoolean()) {
                           symbolConstant = new SymbolConstant(getCurrentScope(), constant.getIdentificador(), valorConst.getBoolean(), getType("boolean"));
                        } else {
                           symbolConstant = new SymbolConstant(getCurrentScope(), constant.getIdentificador(), valorConst.getValue(), getType("int"));
                        }
                        addSymbol(constant.getIdentificador(), symbolConstant);
                      }
                  }

                  //Types
                  if(stmTipos.getSentTipo() != null){
                    for(ExpTipo expTipo: stmTipos.getSentTipo().getExpTipos()){
                       checkTypeDoesNotExists(expTipo.getIdentificador());
                       TypeIF type = new TypeArray(getCurrentScope(), expTipo.getIdentificador());
                       addType(expTipo.getIdentificador(), type);
                    }
                  }


                  //Variables TODO pending add value
                  if(stmVar.getSentVar() != null) {
                    for(ExpVar expVar: stmVar.getSentVar().getExpVars()){
                        //Check names are not duplicated and type exists
                        CadIdVar cadIdVar = expVar.getCadIdVar();
                        for(String identificadorVariable : cadIdVar.getIdentificadores()){
                             checkSymbolDoesNotExists(identificadorVariable);
                             SymbolIF symbolVariable = new SymbolVariable(getCurrentScope(),
                                identificadorVariable, getType(expVar.getTipoVar().getIdentificadorTipo()));
                             addSymbol(identificadorVariable, symbolVariable);
                        }
                    }
                  }


                  //Subprograms

                  for (CabProcedure procedure : stmSubprogram.getProcedures()) {
                        checkSymbolDoesNotExists(procedure.getIdentificador());
                        SymbolIF symbol  = null;
                        if(procedure.getTipoRetorno().getIntOBool() == null) {//Is function
                            symbol = new SymbolFunction(getCurrentScope(), procedure.getIdentificador(),
                            procedure, new TypeFunction(getCurrentScope()));
                        } else {
                            symbol = new SymbolProcedure(getCurrentScope(), procedure.getIdentificador(),
                            procedure, new TypeFunction(getCurrentScope()));
                        }
                        addSymbol(procedure.getIdentificador(), symbol);
                    }

                   RESULT = new Cuerpo(stmConstantes, stmTipos, stmVar, stmSubprogram, sentencias);
                   closeCurrentScope();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cabModule ::= MODULE IDENTIFICADOR PUNTOYCOMA 
            {
              CabModule RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

                   openScope("MODULE_" + identificador.getLexema());

                   //Add simple types
                   addType("boolean", new TypeSimple(getCurrentScope(), "boolean"));
                   addType("int", new TypeSimple(getCurrentScope(), "int"));

                   RESULT = new CabModule(identificador.getLexema());
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabModule",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // axiom ::= cabModule error 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= cabModule cuerpo 
            {
              Axiom RESULT =null;
		int cabModuleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cabModuleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CabModule cabModule = (CabModule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuerpo cuerpo = (Cuerpo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
  		// No modificar esta estructura, aunque se pueden añadir más acciones semánticas

  		//List intermediateCode = ax.getIntermediateCode ();
  		//finalCodeFactory.create (intermediateCode);

  		// En caso de no comentarse las dos sentencias anteriores puede generar una excepcion
  		// en las llamadas a cupTest si el compilador no está completo. Esto es debido a que
  		// aún no se tendrá implementada la generación de código intermedio ni final.
  		// Para la entrega final deberán descomentarse y usarse.

  		syntaxErrorManager.syntaxInfo("Parsing process ended.");
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;

      syntaxErrorManager.syntaxInfo("Starting parsing...");

  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

